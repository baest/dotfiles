up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history

down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history

import_history() {
	fc -RI
}

no_hist() {
	export HISTFILE=/dev/null 
	echo 'History is disabled'
}

mkcd() { mkdir -p ${@:1:$# - 1} "${@: -1}"; cd "${@: -1}" }

fdo() {
    fd -0 "$@" | xargs -0 nvim -O2
}
fda() {
    fd "$@" | perl -l40pe0
}

safe_source() {
    [[ -s "$1" ]] && source "$1"
}

pg() {
	add_ssh_key_if_needed
	[[ -z "$PERLBREW_VERSION" ]] && perlbrew_init
	if [ -z "$@" ]; then
	    local pgsel=$(yq -r 'keys[]' < $HOME/data/pg_service.yaml | perl -lne 'length()>3 && print' | fzf --prompt="PG > " --color "prompt:#89b4fa")
	    if [ -n "$pgsel" ]; then
		~/bin/pg "$pgsel"
	    fi
	    return
	fi
	~/bin/pg "$@"
}

perlbrew_init() {
	safe_source "$HOME/perl5/perlbrew/etc/bashrc"
}
#
# Git supports aliases defined in .gitconfig, but you cannot override Git
# builtins (e.g. "git log") by putting an executable "git-log" somewhere in the
# PATH. Also, git aliases are case-insensitive, but case can be useful to create
# a negated command (gf = grep --files-with-matches; gF = grep
# --files-without-match). As a workaround, translate "X" to "-x".

#g() {
#    typeset -r git_alias="git-$1"
#    if `which "$git_alias" >/dev/null 2>&1`; then
#        shift
#        "$git_alias" "$@"
#    elif [[ "$1" =~ [A-Z] ]]; then
#        # Translate "X" to "-x" to enable aliases with uppercase letters. 
#        translated_alias=$(echo "$1" | sed -e 's/[A-Z]/-\l\0/g')
#        shift
#        "$REAL_GIT" "$translated_alias" "$@"
#    else
#        "$REAL_GIT" "$@"
#    fi
#}
#alias git=g
#compdef _git g=git
#compdef _git git=git

cfg_update() {
    if [[ `find .ssh -name 'config*' | wc -l` > 0 ]]; then
        echo "This command will delete your ssh config files, bailing"
        return 1;
    fi
    cfg fetch --all
    cfg reset --hard
    cfg rebase FETCH_HEAD
	# TODO update fzf
    rm .ssh/config*
}

nvl() {
	dir="{{ .chezmoi.homeDir }}/.nvim/sessions"
	command_ex=""
	if [[ ! -z "$1" ]]; then
		command_ex="-q $1"
	fi

	file=`ls $dir | fzf -1 $command_ex`

	if [[ ! -z "$file" ]]; then
		nv_sess_load $file
		#nvim -S $dir/$file
	fi
}
ot() {
	pbi
	=ot "$@"
}

tl() {
	dir="{{ .chezmoi.homeDir }}/.config/tmuxp"
	set -x

	session="$1"
	command_ex="-q $session"

	session=`ls $dir | fzf -1 $command_ex`
	if [ -z "$session"  ]; then
	    return;
	fi

	session="${session%.*}"

	is_loaded=$(tmux ls | grep $session)
	if [ -z "$is_loaded"  ]; then
	    #tmuxp load -d "$session"
	    tmuxp load "$session"
	fi
	tmux -2 attach -d -E -t "$session"
	#tmux -2 -CC attach -d -E -t "$session"
	#hs -A -c "hs.window.frontmostWindow():maximize()"
}

#function cnodes_zle() {
#  local selected_host=$(~/src/chef/repo/scripts/cnodes|fzf +m --query "$LBUFFER" --prompt="SSH remote > ")
#  if [ -n "$selected_host" ]; then
#    BUFFER="ssh ${selected_host}"
#    zle accept-line
#  fi
#  zle reset-prompt
#}

function cnodesfzf() {
    ZLE_ENABLED=1
    if [[ "${0}" == cnodesfzf ]]; then
	ZLE_ENABLED=0
    fi

    #local selected_host=$({cat ~/.cache/cnodes & awk '{print $1}' ~/.ssh/known_hosts; }|sort|uniq|sk --multi --query "$LBUFFER" --prompt="SSH remote > " --color "prompt:#89b4fa")
    local selected_host=$(cat ~/.cache/cnodes | fzf --bind "tab:preview(sushi {})" --query "$LBUFFER" --prompt="SSH remote > " --color "prompt:#89b4fa")
    if [ -n "$selected_host" ]; then
	SSH_CMD={{ lookPath "ssh" }}
	BUFFER="$SSH_CMD ${selected_host}"
	print -s $BUFFER # put command in history
	if [[ ${ZLE_ENABLED} -eq 1 ]]; then
	    zle accept-line
	else
	    eval ${BUFFER}
	fi
    fi
    if [[ ${ZLE_ENABLED} -eq 1 ]]; then
	zle reset-prompt
    fi
}

zle -N cnodesfzf
bindkey '^X' cnodesfzf

function x() { cnodesfzf; }

set_iterm_name() {
  mode=$1; shift
  echo -ne "\033]$mode;$@\007"
}
iterm_tab () { set_iterm_name 1 $@; }

function get_password() {
    LEN="${1:-36}"
    pwgen -y $LEN -1 -c -n
}

function sushi_ssh() {
    sushi "$@" && ssh "$@"
}

function za() {
    CMD="zellij list-sessions --no-formatting --short"
    if [[ ! -z $ZELLIJ_SESSION_NAME ]]; then
	CMD="$CMD  | grep --invert-match $ZELLIJ_SESSION_NAME"
    fi
    ZJ_SESSIONS=$(eval "$CMD")
    NO_SESSIONS=$(echo "${ZJ_SESSIONS}" | wc -l)

    if [ "${NO_SESSIONS}" -ge 2 ]; then
	zellij attach "$(echo "${ZJ_SESSIONS}" | sk)"
    else
	zellij attach -c
    fi
}

function zl() {
    set -x
    dir="{{ .chezmoi.homeDir }}/.config/zellij/layouts"
    command_ex=""
    if [[ ! -z "$1" ]]; then
	    command_ex="-q $1"
    fi

    file=$(ls $dir | perl -pE 's/\.kdl$//' | fzf -1 $command_ex)
    if [[ ! -z "$file" ]]; then
	zellij --layout=$file --session=$file
    fi
}

function ppath() {
    if (($+PATH)); then
	echo "$#path element(s):"
	printf '%q\n' "$path[@]"
    else
	echo "PATH unset"
    fi

}

function add_ssh_key_if_needed () {
    if $(ssh-add -L 2>/dev/null | rg '^ssh-' > /dev/null); then
	#echo "Keys exist"
    else
	ssh-add $HOME/.ssh/id_ed25519
    fi


}

{{ if ne .chezmoi.os "darwin" }}
function ssh () {
	add_ssh_key_if_needed
	unset_sshkey_override
	{{ lookPath "ssh" }} "$@"
}

function git() {
	add_ssh_key_if_needed
	unset_sshkey_override
	{{ lookPath "git" }} "$@"
}

function tmux() {
	add_ssh_key_if_needed
	unset_sshkey_override
	{{ lookPath "tmux" }} "$@"
}

#function jj() {
#	add_ssh_key_if_needed
#	unset_sshkey_override
#	{{ lookPath "jj" }} "$@"
#}

function unset_sshkey_override() {
	unset -f ssh
	unset -f git
	unset -f tmux
#	unset -f jj
}
function unset_sshkey_override_if_possible() {
    if $(ssh-add -L 2>/dev/null | rg '^ssh-' > /dev/null); then
	unset_sshkey_override
    fi
}
{{else}}
function unset_sshkey_override_if_possible() { }
{{ end }}

function changie() {
    (cd ~/work/log && /usr/bin/changie "$@")
}

function os-dashboard(){
  local SERIAL=$(sudo osqueryi --csv --noheader 'select hardware_serial from system_info')
  xdg-open "https://grafana.one.com/d/fdjhk7tm8x9tsb/osquery-laptop-compliance?var-SERIAL=${SERIAL}"
}

function jjsm() {
    jj log -r "search_mutable(\"@$\")"
}

function jjsa() {
    jj log -r "search_all(\"@$\")"
}
