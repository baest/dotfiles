let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/src/database-schema/coredb/fyi
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +45 public/f_dns_export_trigger.sql
badd +1 public/f_domain_post_update_sync_trigger.sql
badd +1 public/f_domain_id_from_zone_id.sql
badd +2 public/f_domain_add.sql
badd +1 public/f_dns_get_records_single_domain.sql
badd +11 public/f_zone_post_update_sync_trigger.sql
badd +98 public/f_dns_export_get_records.sql
badd +18 public/v_dns_records_view.sql
badd +17 public/v_dns_domain_service_records_view.sql
badd +19 public/f_dns_export_get_magic_records.sql
badd +27 public/f_dns_export_queue.sql
badd +19 public/f_domain_metadata_trigger.sql
badd +13 public/t_domain_metadata.sql
badd +6 public/f_cluster_insert_trigger.sql
badd +9 public/t_zone.sql
badd +2 ~/abe.sql
badd +1 public/f_update_soa_record.sql
badd +31 public/f_dns_export_get_cluster_records.sql
badd +1 public/f_increment_soa.sql
badd +82 public/f_cluster_service_get_new_service_shard.sql
badd +4 public/v_dns_cluster_service_records_view.sql
badd +3 promdress/v_dns_export_queue_total_view.sql
badd +8 public/f_dns_service_dns_get_ip.sql
argglobal
%argdel
$argadd public/f_domain_post_update_sync_trigger.sql
edit public/v_dns_cluster_service_records_view.sql
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 20 + 29) / 59)
exe '2resize ' . ((&lines * 36 + 29) / 59)
argglobal
balt public/f_dns_get_records_single_domain.sql
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 4 - ((3 * winheight(0) + 10) / 20)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 4
normal! 034|
wincmd w
argglobal
if bufexists(fnamemodify("public/v_dns_domain_service_records_view.sql", ":p")) | buffer public/v_dns_domain_service_records_view.sql | else | edit public/v_dns_domain_service_records_view.sql | endif
if &buftype ==# 'terminal'
  silent file public/v_dns_domain_service_records_view.sql
endif
balt public/v_dns_cluster_service_records_view.sql
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 1 - ((0 * winheight(0) + 18) / 36)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 0
wincmd w
exe '1resize ' . ((&lines * 20 + 29) / 59)
exe '2resize ' . ((&lines * 36 + 29) / 59)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
